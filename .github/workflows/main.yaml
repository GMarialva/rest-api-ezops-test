name: App Build

on:
  push:
    branches:
      - build
  workflow_dispatch:

env:
  DOCKER_ID: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PW: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_REGISTRY: ${{ secrets.DOCKER_CONTAINER_REGISTRY }}
  APP_NAME: ezops-api
  NAMESPACE: ezops-api

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      foo: ${{ env.bar }}

    steps:
    - uses: actions/checkout@v3
      with:
          ref: ${{github.base_ref}}

    - name: Set variables
      id: setvars
      run: |
        echo ""

  build:
    runs-on: ubuntu-latest
    needs: init

    steps:
    - uses: actions/checkout@v3
      with:
          ref: ${{github.base_ref}}
          
    - name: Get Time
      id: time
      uses: nanzm/get-time-action@v1.1
      with:
        timeZone: '-3'
        format: 'YYMMDDHHmm'

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.DOCKER_CONTAINER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build docker
      env:
        TIME: "${{ steps.time.outputs.time }}"
      run: |
        echo 'Building the Docker image...'
        docker build --no-cache --rm -t $DOCKER_REGISTRY/$APP_NAME:$TIME .
        echo 'Pushing the Docker image...'
        echo 'All done!'
          
    - name: Trivy Scanning
      env:
        TIME: "${{ steps.time.outputs.time }}"
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.DOCKER_REGISTRY }}/${{env.APP_NAME}}:$TIME'
        format: 'table'
        output: 'trivy-results.txt'

    - name: Upload report Trivy
      uses: actions/upload-artifact@v2
      with:
        name: Trivy
        path: |
          trivy-results.txt

    - name: Push to docker 
      env:
        TIME: "${{ steps.time.outputs.time }}"
      run: docker push $DOCKER_REGISTRY/$APP_NAME:$TIME

  deploy:
    runs-on: ubuntu-latest
    needs: [init, build]

    steps:
    - uses: actions/checkout@v3
      with:
          ref: ${{github.base_ref}}
         
    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        kubectl version --client

    - name: Deploy to kubernetes
      run: |
        kubectl apply file.yaml -n ${{ env.NAMESPACE }}